pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1' 
        AWS_CREDENTIALS_ID = 'aws-credentials-id' 
        SLACK_CHANNEL = '#all-production-mern'  
        SLACK_CREDENTIAL_ID = 'slack-token'  
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-cred', url: 'https://github.com/Chanidu26/devops-cd.git'
            }
        }
        stage('Setup AWS Credentials') {
            steps {
                withAWS(credentials: "${AWS_CREDENTIALS_ID}", region: "${AWS_REGION}") {
                    echo "AWS credentials configured!"
                }
            }
        }
        stage('Download & Setup Key') {
            steps {
                script {
                    sh """
                    aws s3 cp s3://devops-chanidu-pemfile-bucket/devops.pem ./devops.pem
                    chmod 400 devops.pem
                    cp devops.pem terraform/devops.pem
                    cp devops.pem ansible/devops.pem
                    rm -f devops.pem
                    whoami
                    """
                }
            }
        }
        stage('terraform init'){
            steps {
                dir("terraform"){
                    sh 'terraform init'
                }
            }
        }
        stage('terraform validate'){
            steps {
                dir("terraform"){
                    sh 'terraform validate'
                }
            }
        }
        stage('terraform plan'){
            steps {
                dir("terraform"){
                    sh 'terraform plan'
                }
            }
        }
        stage('terraform apply'){
            steps {
                dir("terraform"){
                    sh 'terraform apply -auto-approve'
                }
            }
        }
        stage('Update Playbook') {
            steps {
                sh 'bash update_playbook.sh'
            }
        }
        stage('Update Inventory') {
            steps {
                sh 'bash update_inventory.sh'
            }
        }
        stage("Run Ansible Playbook"){
            steps {
                dir("ansible"){
                    sh 'ansible-playbook -i inventory.ini playbook.yml'
                }
            }
        }
        stage("Run Ansible Webapp Playbook "){
            steps {
                dir("ansible"){
                    sh 'ansible-playbook -i inventory.ini playbook-webapp.yml'
                }
            }
        }

        
    }
    post {
        success {
            echo "Pipeline executed successfully!"
            slackSend(channel: "${SLACK_CHANNEL}", color: 'good', message: "✅ *Build Success* for Job: `${env.JOB_NAME}` #${env.BUILD_NUMBER}\n<${env.BUILD_URL}|View Logs>")
        }
        failure {
            echo "Pipeline failed. Please check the logs."
            slackSend(channel: "${SLACK_CHANNEL}", color: 'danger', message: "❌ *Build Failed* for Job: `${env.JOB_NAME}` #${env.BUILD_NUMBER}\n<${env.BUILD_URL}|View Logs>")
        }
        always {
            echo "Pipeline execution finished."
            sh '''
            echo "Cleaning up PEM files..."
            rm -f terraform/devops.pem
            rm -f ansible/devops.pem
            '''
        }
    }
}
